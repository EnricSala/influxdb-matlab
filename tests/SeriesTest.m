classdef SeriesTest < matlab.unittest.TestCase
    
    properties(Access = private)
        Time, Temperature, Humidity, WindDirection, RainDrops, Raining;
    end
    
    methods(TestMethodSetup)
        function setup(test)
            timestamps = [1529933525520, 1529933581618];
            test.Time = datetime(timestamps / 1000, 'ConvertFrom', 'posixtime');
            test.Temperature = [24.3, -3.5];
            test.Humidity = [60.7, 54.2];
            test.RainDrops = int64([123456789, -987654321]);
            test.WindDirection = {'north', 'west'};
            test.Raining = [true, false];
        end
    end
    
    methods(Test)
        function single_field(test)
            s = Series('weather') ...
                .fields('temperature', test.Temperature);
            exp = [ ...
                'weather temperature=24.3' newline ...
                'weather temperature=-3.5'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function supports_fields_with_integer_values(test)
            p = Series('weather') ...
                .fields('rain_drops', test.RainDrops);
            exp = [ ...
                'weather rain_drops=123456789i' newline ...
                'weather rain_drops=-987654321i'];
            test.verifyEqual(p.toLine(), exp);
        end
        
        function supports_fields_with_string_values(test)
            p = Series('weather') ...
                .fields('wind_direction', test.WindDirection);
            exp = [ ...
                'weather wind_direction="north"' newline ...
                'weather wind_direction="west"'];
            test.verifyEqual(p.toLine(), exp);
        end
        
        function supports_fields_with_logical_values(test)
            p = Series('weather') ...
                .fields('raining', test.Raining);
            exp = [ ...
                'weather raining=true' newline ...
                'weather raining=false'];
            test.verifyEqual(p.toLine(), exp);
        end
        
        function multiple_fields(test)
            s = Series('weather').fields( ...
                'temperature', test.Temperature, 'humidity', test.Humidity);
            exp = [ ...
                'weather temperature=24.3,humidity=60.7' newline ...
                'weather temperature=-3.5,humidity=54.2'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function multiple_fields_from_struct(test)
            fields = struct( ...
                'temperature', test.Temperature, ...
                'humidity', test.Humidity);
            s = Series('weather').fields(fields);
            exp = [ ...
                'weather temperature=24.3,humidity=60.7' newline ...
                'weather temperature=-3.5,humidity=54.2'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function supports_multiple_fields_calls(test)
            s = Series('weather') ...
                .fields('temperature', test.Temperature) ...
                .fields('humidity', test.Humidity);
            exp = [ ...
                'weather temperature=24.3,humidity=60.7' newline ...
                'weather temperature=-3.5,humidity=54.2'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function single_tag(test)
            s = Series('weather') ...
                .tags('city', 'barcelona') ...
                .fields('temperature', test.Temperature);
            exp = [ ...
                'weather,city=barcelona temperature=24.3' newline ...
                'weather,city=barcelona temperature=-3.5'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function multiple_tags(test)
            s = Series('weather') ...
                .tags('city', 'barcelona', 'station', 'a1') ...
                .fields('temperature', test.Temperature);
            exp = [ ...
                'weather,city=barcelona,station=a1 temperature=24.3' newline ...
                'weather,city=barcelona,station=a1 temperature=-3.5'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function tags_from_struct(test)
            tags = struct('city', 'barcelona', 'station', 'a1');
            s = Series('weather').tags(tags) ...
                .fields('temperature', test.Temperature);
            exp = [ ...
                'weather,city=barcelona,station=a1 temperature=24.3' newline ...
                'weather,city=barcelona,station=a1 temperature=-3.5'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function supports_multiple_tags_calls(test)
            s = Series('weather') ...
                .tags('city', 'barcelona') ...
                .tags('station', 'a1') ...
                .fields('temperature', test.Temperature);
            exp = [ ...
                'weather,city=barcelona,station=a1 temperature=24.3' newline ...
                'weather,city=barcelona,station=a1 temperature=-3.5'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function fails_when_time_size_does_not_match_fields(test)
            s = Series('weather') ...
                .fields('temperature', test.Temperature) ...
                .time(test.Time(1:end-1));
            test.verifyError(@() s.toLine(), 'toLine:sizeMismatch');
        end
        
        function fails_when_field_sizes_do_not_match(test)
            s = Series('weather') ...
                .fields('temperature', test.Temperature) ...
                .fields('humidity', test.Humidity(1:end-1));
            test.verifyError(@() s.toLine(), 'toLine:sizeMismatch');
        end
        
        function time_is_added(test)
            s = Series('weather') ...
                .fields('temperature', test.Temperature) ...
                .time(test.Time);
            exp = [ ...
                'weather temperature=24.3 1529933525520' newline ...
                'weather temperature=-3.5 1529933581618'];
            test.verifyEqual(s.toLine(), exp);
        end
        
        function every_property_is_used(test)
            s = Series('weather') ...
                .tags('city', 'barcelona') ...
                .fields('temperature', test.Temperature) ...
                .time(test.Time);
            exp = [ ...
                'weather,city=barcelona temperature=24.3 1529933525520' newline ...
                'weather,city=barcelona temperature=-3.5 1529933581618'];
            test.verifyEqual(s.toLine(), exp);
        end
    end
    
end
